#lang racket/base
(require (prefix-in i: 2htdp/image)
         racket/function
         racket/math
         racket/list
         plot
         "util.rkt")

(define xs->image
  (let ([v (build-vector 256 (λ (c) (i:freeze (i:circle 1 'solid (i:color (- 255 c) (- 255 c) (- 255 c))))))])
    (λ (xs)
      (for*/fold ([i (i:square 28 'solid 'white)])
                 ([(r y) (in-indexed (ngroup 28 xs))]
                  [(c x) (in-indexed r)])
        (i:place-image (vector-ref v c) x y i)))))

(define (softmax-regression/multinomial/stochastic-gradient-descent
         #:good-cost-diff good-cost-diff
         #:learning-rate learning-rate
         #:debug? [debug? #f]
         xss ys)
  (let* ([m (length ys)]
         [k1 (sub1 (length (remove-duplicates ys)))]
         [xsst (transpose xss)]
         [css (build-list k1 (λ _ (build-list (length (car xss)) (λ _ (* 0.001 (random))))))])
    (let loop ([iter 0]
               [old-cost +inf.0]
               [lr learning-rate]
               [old-css css]
               [css css])
      (let* ([pss (let* ([mx -inf.0]
                         [dss (for/list ([xs xss])
                                (for/list ([cs css])
                                  (let ([d (v. cs xs)])
                                    (when (> d mx)
                                      (set! mx d))
                                    d)))]
                         [ess (for/list ([ds dss])
                                (for/list ([d ds])
                                  (exp (- d mx))))])
                    (for/list ([es ess])
                      (let ([d (add1 (for/sum ([e es])
                                       e))])
                        (for/list ([e es])
                          (/ e d)))))]
             [cost (- (for/sum ([y ys]
                                [ps pss]
                                #:unless (= k1 y))
                        (log (list-ref ps y))))])
        (when #t;(= 0 (modulo iter 10)) too slow anyway
          (printf "iter=~a~na=~a~nJ=~a~n~n";THETA=~a~n~n" too many coeffs
                  iter
                  lr
                  cost))
        (cond [(< cost 1); 600 iter)#|(<= (abs (- cost* cost))
               ;good-cost-diff)|#
               (displayln css)
               (λ (xs)
                 (let ([ps pss])
                   (append ps (list (- 1 (apply + ps))))))]
              [(> cost old-cost)
               (loop iter old-cost (/ lr 16) old-css old-css)]
              [else
               (loop (add1 iter)
                     cost
                     (* 2 lr)
                     css
                     (for/list ([(cs j) (in-indexed css)]
                                [pst (transpose pss)])
                       (printf "class ~a...~n" j)
                       (for/fold ([cs cs])
                                 ([xs xss]
                                  [(y k) (in-indexed ys)]
                                  [p pst])
                         (let ([rand-i (random (length (car css)))])
                           (for/list ([x xs]
                                      [(c i) (in-indexed cs)])
                             (+ c (* lr (let ([derived-deriv (* x (- (if (= j y) 1 0) p))])
                                          (when (and debug?
                                                     (= i rand-i)
                                                     (= 0 (modulo k 3000)))
                                            (let* ([e 0.0001]
                                                   [J (λ (f)
                                                        (let-values ([(l r) (split-at cs i)])
                                                          (let ([cs (append l (list (f (car r) e)) (cdr r))])
                                                            (- (for/sum ([xs xss]
                                                                         [y ys]
                                                                         #:unless (= k1 y))
                                                                 (- (v. xs (list-ref css y))
                                                                    (log (add1 (for/sum ([cs css])
                                                                                 (exp (v. xs cs)))))))))))]
                                                   [approx-deriv (/ (- (J +) (J -))
                                                                    (* 2 e))])
                                              (printf "Gradients:~nderived: ~a~napprox: ~a~n~n" derived-deriv approx-deriv)))
                                          derived-deriv))))))))])))))

(module+ main
  (let ([xss (load-mnist-images)]
        [ys (load-mnist-labels)])
    (let ([h (time (softmax-regression/multinomial/stochastic-gradient-descent
                    #:good-cost-diff 0.01
                    #:learning-rate 0.0000001
                    #:debug? #t
                    xss ys))])
      (let-values ([(r w) (for/fold ([right 0] [wrong 0])
                                    ([xs xss]
                                     [y ys])
                            (cond [(= y (round (h xs)))
                                   (values (add1 right) wrong)]
                                  [else
                                   (displayln (xs->image xs))
                                   (values right (add1 wrong))]))])
        (printf "accuracy: ~a~n" (exact->inexact (/ r (+ r w))))))))#|

;misses 1 test case >:(
(define perfect-train-cs
  '(8.190918558400539e-005 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -3.4904650146900186e-007 -6.899122255598238e-007 -2.8360028244356393e-007 4.205165040336705e-006 -5.053412522537891e-005 -0.00015645754686951962 -7.48793056666616e-005 0 0 0 0 0 0 0 0 0 0 0 0 0 -6.91417675640674e-008 -2.3841988815195678e-008 0 -2.0298311983017987e-007 -4.769681414759313e-007 -1.049119783660754e-007 0 3.4582345119313546e-007 2.580287760654831e-006 0.00012304758574689754 0.0015265667961611407 0.0004482512236126965 0.00014078818372539157 0.0008040137440453257 0.0018178608609332467 0.0004411881217080118 1.7868560358031168e-005 4.314501130999868e-006 0 0 0 0 0 0 0 0 0 1.0028739934975262e-007 -1.7639475382151226e-007 -2.95639550669381e-007 -9.2268113608781e-007 -7.891663765403428e-007 -9.70986857047435e-007 0.00013436112525454642 0.00013306550922277625 1.1714889351519175e-005 2.140956424992485e-005 0.0008669054053629365 0.0016246934933109134 0.0014167335518795682 0.0013185259237334444 0.002867781059419308 0.0036341623569980334 0.0018564343457369201 0.00015531017152344535 0.00010022495695174722 4.766929981235937e-005 -1.2485250009477602e-006 -1.3580902327396492e-006 -6.935500492268227e-007 -1.9854570036689415e-007 0 0 0 0 3.438425120562944e-007 -3.0028881066944166e-007 1.1085033801404123e-006 1.4744714385335401e-005 -1.4432713437263395e-005 -7.716269807163732e-005 0.0011276746525041186 0.0016869429128272572 0.0007623534665782992 0.0008496286402368455 0.0015157433727535435 0.001360062220108356 0.0005043205716788628 0.0013308479433185943 0.0004173062473721107 0.0023673324099705182 -0.0013617872688657109 0.0006838756460855351 0.0018446060946083504 0.000686557993630609 0.0005382038602365261 0.00027328104383406843 2.9151439441931092e-005 -4.148144494154337e-007 0 0 0 0 3.604051419266061e-007 1.7153743733697822e-007 2.8525690559735904e-006 3.339517284445591e-005 -5.518475445836734e-005 -0.00011139287512414978 0.0016713710069156246 0.0016904814357880838 0.00019740590412275282 0.0008970574142570484 0.0024664103855038077 0.003854791023628518 -0.0017072985473783621 -0.0016554765072895896 0.000566840607336155 0.0017243099356419635 -0.0013485959094375237 -0.0006955251999343528 0.0028977556671535456 0.0024255410016524905 0.002482179179613287 0.0018897160670434477 0.0006240650409343351 9.413716117127657e-007 1.2750552012882382e-007 0 0 0 7.816230936858573e-008 1.3525603201734292e-006 2.3553038995690143e-006 -8.359063890105272e-006 0.00012930040541775354 0.0005960298020552425 0.0007678089422881234 0.00045494546275261813 -0.00035013221701719096 -0.001077499340643537 0.0007309287818083079 0.0014265568307043593 -0.0006239229836215711 -0.001702299638041991 -0.002497336325744257 -6.087705646815687e-005 -0.00012433687405741424 -0.001074632907911413 0.0031317491575154005 0.0019711129769501507 0.0002895133439433753 0.0002860645263725199 0.0004112636257406467 -9.869516975506397e-007 -2.0115285677997418e-007 -1.7419924271824504e-007 0 0 1.7409279381595212e-007 9.90604176607098e-008 0.0017513366286770462 0.0018586216882308423 0.0005681799642309347 0.0014106785884813243 0.0002803627469428678 -0.0015537285738661498 -0.0027090541651292187 -0.0033101801223926236 0.00023670784294441897 0.00032648702600736985 -2.4689940749850643e-005 -0.0016870393243820412 0.00018053811597543333 -0.0020237462083399524 -0.0021748126734340728 -0.0015720948045904752 0.0008646869000654189 -0.0011746557097078584 -0.0012102055612044577 -0.00040855801645978406 -0.0011483927793775755 -7.111120699993117e-005 9.476128067006586e-008 -3.674888134056135e-007 -3.753456991577869e-007 0 -1.7891183827701395e-007 -1.1212229693832514e-007 0.0016414871822376697 0.0022209175706720376 0.0005848494698085254 0.00101173180289313 0.00025019838116346134 -0.0013671561290957421 -0.0019264799804334372 -0.0014359358021794383 0.0026850681258698277 -0.0004343721522868648 0.0030522978137188963 0.0010640221597541504 -0.0029858010865885607 -0.003611546055246494 -0.00045135713717828554 0.00039190847036704854 -0.002238015024612757 -0.003260219256709393 -0.001294486881437425 0.00015433482503505682 -0.000477539096143443 -4.1644989899085265e-005 0 0 0 1.9735959259380455e-007 -3.929450898630285e-007 -6.290543931062703e-007 0.0020088472979052597 0.0019467562387691607 -0.0004372473074682869 0.0005210869143746051 0.000544937869931849 1.947365778484202e-005 -0.0009434165107177253 -0.00038314329998853614 0.0015493112683856438 0.0034891114516038225 0.0032571271722055635 0.0006694629265759242 0.000117424032159625 -0.0013319926853740001 0.002576979953518221 0.0032361163782522735 -0.003476112537240343 -0.004790826972728764 -0.002252623696897473 -0.0009572635517263197 -0.0001411802280550608 -7.430099423943432e-005 1.5944279725212434e-007 0 0 3.2405957796266656e-007 -1.8265096754750782e-006 -1.8808274711684662e-006 0.001993839177301944 0.0007393371912423974 -0.0012335939409652676 -0.0009236303364958633 -0.0007642048672623737 0.0005198193478866028 -0.0005239979776073293 0.00011090063280804404 0.0015769400454442653 0.001983242152965814 0.0006029852316671127 0.0021163092878546674 0.0027022598997465705 -0.0019077773332039478 0.0005431264048155357 0.0012299498958262731 -0.0027512976868338673 -0.0031758561241242585 -0.002212884219223289 -0.0014720283405544202 -0.0003084727034738873 -7.348870886838553e-005 4.238192662022808e-007 9.177793212355048e-008 0 -7.026820825393187e-008 9.517171027242288e-008 -3.230501431550107e-007 0.0019008897221161974 -0.0002189645369857955 -0.0015166931606230463 -0.001538400661748727 -0.001823698682176079 -0.001134468816352188 -0.001262222533938346 -0.0007451591401459234 0.0003309319888404059 0.001176522383852834 -0.0005765214880717339 0.004236033525755863 0.0027850889173811834 -0.0007242502722561182 -0.0017614488597867846 -0.0017093588386591703 0.00031171191083626833 -0.002376811108952572 -0.002346056460266657 -0.0005024933454689097 -0.0007828419314272337 -8.324459652542169e-005 -1.452453837649341e-007 2.175788554645474e-007 0 -3.82898240013703e-008 -1.1324566702221007e-007 2.88339219767733e-009 0.0011371965702458053 -0.0011797597035623428 -0.0014646762844576348 -0.0012610590768122505 -0.0026770851462930246 -0.003174992513468759 -0.0006405689728578396 -0.00024848217899302137 -0.0022188145641498227 0.002502123409498264 0.0011210181958254564 0.004956336657465327 0.002543028959488795 0.00038826303770003035 -0.002822399291051237 -0.0022965849371448716 0.0003096069611782946 -0.002802693821314999 -0.0020858600835426686 -0.0016369867965223082 -0.0009335141133924048 -0.00010808875137515201 -3.688044530059717e-007 2.6271484693180136e-007 8.026217174319998e-008 -1.5076618200539559e-007 -3.9754396392526886e-007 -3.855831214150627e-007 0.00028321186593490013 -0.0015206713501618872 -0.0012561457757559633 -0.0025305579638120693 -0.003539301229024708 -0.0017370792080572948 -0.0006763547785474916 -0.002688304433564919 -0.0004582282314919863 0.005281079513440404 0.004999296376013098 0.004433450661584842 0.002374044992075056 0.00011298212943747317 -0.007269690417612365 -0.0010670893792485885 0.0008832604836195565 -0.0039838262593182745 -0.004390469156496251 -0.0028975301259623982 -0.0010059160170150898 -0.0001241523676582635 -1.3712785889919166e-008 0 0 0 8.727444413153765e-008 8.92944883873148e-007 -0.00028665743366734943 -0.0015847970609333187 -0.0022006447351537515 -0.0036486989894585022 -0.0021256551447108385 0.0013732030723431407 -0.003149911487241924 -0.0017648248071852218 2.392028353270302e-005 0.004909853231129108 0.007517100636821094 0.004337668093385308 0.0039024380330552914 -0.001732187171940447 -0.009898760187737596 -0.00028525865675477305 -0.0005940698515755226 -0.003527215569389638 -0.003458257466555292 -0.0028933427211568696 -0.0012708446254063675 -0.0001211672286178333 3.4948621188729354e-007 0 0 0 5.832823868291727e-007 7.736759809400762e-006 -0.0011730523381136963 -0.0021356181478729445 -0.0026204321797944708 -0.00267216559027446 -0.001830509025698288 -0.0006996479380040476 -0.004211616971826438 -0.001927918062272207 0.002423182721111844 0.007318989065834575 0.007433084009586524 0.001986322980259737 0.0009236181526845297 -0.006643652724675469 -0.004594081950096915 -0.00036427160433243007 -0.0011739107229837861 -0.002754441437931214 -0.002710944796068645 -0.0029537136373475356 -0.0011475180347512027 -7.117339438317173e-005 1.397944847549175e-007 0 0 9.375342176883866e-008 5.964472176566816e-007 -2.162876016507404e-006 -0.0012976545128173694 -0.0017956006364127717 -0.001959240868929246 -0.0034216095627896724 -0.0008134054224610338 -0.004634436730550405 -0.003808613920167427 -0.0004150928039914665 0.001893473106508327 0.006241478694264122 0.004697210333051131 0.002361813132427083 -0.0026136517098378853 -0.006742801333284403 -0.0006077305109264453 -0.0006576947969971362 -0.003832186879080508 -0.0019458622904936355 -0.002185201511782925 -0.0020504626490584514 0.0010647771158534456 0.0005908525208951905 4.4440617694366876e-007 -3.067574153781098e-008 0 3.1432588723007616e-007 1.09689580124974e-007 -3.6972891036454714e-006 -0.0014091947591175528 -0.0020171523233591185 -0.0022542105734173774 -0.001793144526777701 -0.0012810210958087338 -0.005397656440133247 -0.004088813161378548 -0.0008435628446380194 0.0018698366860983107 0.002963926570695638 0.00040781408638968186 0.002403414250132768 -0.0016564680106049801 -0.00463104479507899 -0.0019111314479387568 -0.0016712038707137299 -0.002947694560918283 -0.0013600876077940287 -0.001963890473177535 -0.0016381591696792111 0.0018571504577882022 0.002556906034116448 7.542048826068799e-007 -2.3482588859036953e-007 7.779398121089402e-009 6.103293251844145e-008 1.2464725014201602e-008 -4.887673523082379e-006 -0.001156024787480934 -0.0026812662741294182 -0.0023647717683416406 1.675252810808382e-005 -0.001777923416467304 -0.00394542657055397 -0.0012902975562549335 -0.0022387140212591088 0.0014186427654325766 0.0021055355790688146 0.000611914158800652 0.001590706899733511 0.000816383005279578 -0.003442327641144248 0.0003317825220161928 -0.0028763268305764863 -0.000969370242005553 -0.0013919830535099142 -0.0018675218289343864 -0.000867135851461409 0.0025924789071707696 0.0026069358422941506 1.1531313014386735e-006 7.742125337127067e-007 3.889699060544707e-008 -2.7978714003397482e-006 -2.860621264051142e-006 -8.453995238401284e-006 -0.0009594031869499437 -0.002997483909110472 -0.0008832919969075315 0.0012018211245554834 -0.00257271384924926 -0.0007963543291184752 0.001772164587132715 -0.00111978221806642 -0.0004891028557573235 0.0014305299077875205 0.0011997628588233634 0.0015031208825867632 -0.0005375104859657063 -0.0005739683453031567 0.000799292979519532 -0.001349087176734199 -0.0011881434433502758 -0.0008623876323613985 -0.0006562138728330428 0.0012286725185726149 0.002921412946414294 0.0025999898217361505 6.631005853987067e-007 5.387719005487891e-007 0 -7.584165095835018e-006 -5.2466017663168985e-006 9.502585786107065e-006 0.0002802281532380437 -0.0004968327716305246 0.0018845318686441636 -0.00046294234723490266 -0.00018353241280378478 0.0022757095526063525 0.000723740408544788 -0.0007445099974470089 -0.0029935329035464683 -0.0018910124012191682 0.0019561777961309484 0.0021383044624123018 0.0007042797517962292 0.004550131987263119 0.004559295443261701 0.001822389291146528 0.0023869323178936884 0.00042814301150523657 0.0013183849445458915 0.00293991896804825 0.002936190679904513 0.0017489916677929799 2.3360280853221893e-007 1.3153286741903523e-007 8.877499050697451e-008 2.774218453342949e-008 -1.6331769476305705e-007 7.171804532674718e-005 0.00035586584427870106 0.0010235525832332248 0.0022640958360354677 0.0022011650492437867 0.0013670653031606585 0.0025385281225074295 -0.0019789287014292333 -0.0028725887772493336 -0.004019384309737989 -0.0009368973985608715 0.0015039267640390547 -0.0003759835111315793 0.0016605775335745202 0.0037158586282322274 0.0034080695956668337 0.0024306181190552095 0.004920169016153874 0.0034478176720894316 0.0016377689712377453 0.0017024468815066225 0.002410242676917381 0.0005053820476998304 -5.064171639338903e-007 -9.299503767735326e-008 8.600077205363146e-008 2.774218453342949e-008 1.9545091340913163e-007 3.236185056344125e-005 0.0012133856573758601 0.002147561407848519 0.00040959650819718635 0.0002852187714752345 0.0008965527961099826 0.002809019024163589 -0.00141577660500045 -0.0031357794605232007 -0.004413298731430671 0.0014898426834283904 -0.0014084978932928005 -0.0025209523161762947 -0.0008424096441147301 0.0006483483603020831 0.001053589801504101 0.0006708998432336938 0.003932010206240346 0.0027319968980077545 0.000262508651751612 0.00014246445648333892 0.00028502349042259855 7.213901368677877e-005 2.6229954024833173e-007 -1.7168314648126751e-007 0 0 0 -1.089693297379676e-007 0.00039081544834967865 -0.00021963777385670285 -0.001413868978828971 -0.0017246425742805693 -0.0007274622071218693 0.0035448671067751666 -0.00048012364320995426 -0.0025236602447588634 -0.000714765018260141 0.000577238632530227 -0.0028324022013372107 -0.0011062889248495886 2.2087027031845648e-005 0.00024320480352216703 0.0005228896352315482 0.0007199230485655344 0.0027387826298322054 0.0005254972997991642 0.00031385294055790515 -7.339743959711658e-006 -2.0419236443419396e-007 4.4292684553957767e-007 7.735911008659001e-007 0 0 0 0 2.6414693287809534e-009 -0.00010654472184783334 -0.0009305564915297759 -0.0008543224319309329 -8.18685555015728e-005 -0.0003619165200194846 0.0010765811888079964 0.002586479577913858 0.0005291444887735754 -0.0007700206083172745 0.0004552140610397279 -0.0022989250478283843 0.0002412578753805519 0.0009060315171262136 0.0013101216020763075 8.502607211547967e-006 0.0005493207431617626 8.468121072357346e-005 0.0006576698022409013 0.0003863933248385418 -1.4022319706428892e-007 -3.0565234136694024e-007 8.489475510748654e-008 4.3679916499001665e-008 0 0 0 0 0 0 3.2463225678124913e-007 8.351032275158022e-007 1.766042206177543e-005 3.66316915322905e-005 -4.85912187303697e-007 -3.023733533167686e-005 -8.471988578783434e-006 0.002975883036864469 0.002898226284030268 0.0006545443820426996 0.0009767473983858283 0.0002199728993476381 2.2193049598619917e-008 -1.2225843467352835e-007 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5.462395699019788e-007 3.1002786399842035e-007 0 0 0.00017789626109434046 0.0005309091542034231 0.00017789626109434046 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))

(module+ main
  (let ([xss (load-test-mnist-images)]
        [ys (load-test-mnist-labels)])
    (let-values ([(xss ys) (for/fold ([xss '()] [ys '()])
                                     ([xs xss]
                                      [y ys]
                                      #:when (< y 2))
                             (values (cons xs xss) (cons y ys)))])
      (let ([h (compose sigmoid (curry v. perfect-train-cs))])
        (let-values ([(r w) (for/fold ([right 0] [wrong 0])
                                      ([xs xss]
                                       [y ys])
                              (cond [(= y (round (h xs)))
                                     (values (add1 right) wrong)]
                                    [else
                                     (displayln (xs->image xs))
                                     (values right (add1 wrong))]))])
          (printf "accuracy: ~a~n" (exact->inexact (/ r (+ r w)))))))))|#